package com.practice.problems;

//represent each element in the linked list
class Node {
	int data;
	Node next;
	
	// constructor to create a new node
	public Node(int data) {
		this.data = data;
		this.next = null;
	}
	
}
// linked list class
class LinkedList{
	Node head;
	// construct to initialize the head of the linked list
	public LinkedList() {
		this.head = null;
	}
	// Method to add elements to the linked list
	public void append(int data) {
		Node newNode = new Node(data);
		if (head == null) {
			head = newNode;// if the list is empty, the new node become the head
			return;
		}
		Node lastNode = head;
		while (lastNode.next != null) {
			lastNode = lastNode.next; // Traverse to the last node
		}
		lastNode.next = newNode; // set the next pointer of the last node to the new node
	}
	
	//Method to search for an element and return its index
	public int search(int target) {
		Node current = head;
		int index = 0;
		while(current != null) {
			if (current.data == target) {
				return index; // Return index if the element is found
			}
			current = current.next;
			index++;
		}
		return -1; // return -1 if the element is not found
	}
}

// Main class to test the Linked List implementation

public class Search_And_Display_Index {
	public static void main(String[] args) {
		
		LinkedList linkedList = new LinkedList();
		int[] elements = {1,3,0,3,8,5,3}; // The elements to be added to the linked List
		
		// add elements to the linked list
		for (int element: elements) {
			linkedList.append(element);
		}
		// search for the number 7 and display its index
		int indexOf7 = linkedList.search(7);
		if (indexOf7 != -1) {
			System.out.println("The number 7 is at index "+indexOf7+ ".");
		}else {
			System.out.println("The number 7 was not found in the linked list.");
		}
	}

}
